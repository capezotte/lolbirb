#!/bin/sh
USAGE='Usage: lolbirb [OPTION]... [FILE]...
Conbirbenate FILE(s) to standard output.

With no FILE, or when FILE is -, read standard input.

  -p <f>         Rainbow spread (default: 1)
  -F <f>         Rainbow frequency (default: 0.1)
  -S <f>         Initial angle (default: 0)
  -d <i>         If greater than zero, animates each line <i> times.
  -a             Equivalent to -d 12.
  -s <f>         Animation speed, in FPS (default: 20)
  -i             Rainbows background instead of foreground.
  -t             Ignored for backwards compatibility with lolcat.
                 (true-color is required).
  -h             Displays this help.

Examples:
  lolbirb f - g                    Output f'\''s contents, then standard input, then g'\''s contents.
  lolbirb                          Copy standard input to standard output.
  lolbirb -S $(shuf -i0-256 -n1)   Randomizes color.
  cowsay -f tux | lolbirb          Friendly interaction between birbs.

For help, see `'"cat $0"'`.'

AWK=awk
# Prefer gawk when available (so UTF-8 is better handled)
if [ -x "$(command -v gawk 2>/dev/null)" ]; then AWK=gawk; fi

while getopts :p:F:S:ad:s:itfvh OPT; do case $OPT in
	v) echo 'Lolbirb 0.1 (C) 2020 oc1024' ;;
	h) echo "$USAGE"; exit 0 ;;
	p) spread=$OPTARG ;;
	F) freq=$OPTARG ;;
	S) init=$OPTARG ;;
	a) duration=12 ;;
	d) duration=$OPTARG ;;
	s) speed=$OPTARG ;;
	i) escape_code=48 ;;
	t) : ;; # That's what we do by default.
	*)
		echo "Unrecognized option."
		echo "See $(basename "$0") -h for usage."
		exit 1
		;;
esac; done

shift $((OPTIND-1))

printf '%b' '\033[0m'
exec $AWK -f /dev/fd/3 \
	-v "fg=${escape_code:-38}" \
	-v "freq=${freq:-0.1}" \
	-v "init=${init:-${RANDOM-:0}}" \
	${duration:+-v "repeat=$duration"} \
	-v "spread=${spread:-3}" \
	-v "speed=${speed:-20}" \
3<<\EOF -- "$@"
BEGIN {
	FS=""
	ORS=""
	PI=3.14159265
	# init - initial color (initialized by script)
	# freq - frequency of color change (initialized by script)
	# repeat - times animation is repeated (initialized by script)
	# speed - FPS of animation (initialized by script)
	# spread - how many units of rainbow are skipped per line (init by script)
	factor = init * freq # keeps track of what color we should print
}

{
	actual_repeats = repeat
	if (/^[[:space:]]*$/) {
		actual_repeats = 0 # Make empty lines print instantly
	}
	# Repeat each line repeat+1 times (for animation)
	for (r=actual_repeats;r>=0;r--) {
		for (i=1;i<=NF;i++) {
			factor = (init + NR*spread + i - r) * freq
			printf("\033[" fg ";2;%d;%d;%dm%s",
			       sin(factor)*127 + 128,
			       sin(factor+(PI*2/3))*127 + 128,
			       sin(factor+(PI*4/3))*127 + 128,
			       $i)
		}
		# All but last repetition have to wait for the proper framerate.
		# `exit 27` is a trick so we can be sure the user didn't press Ctrl+C
		# during the animation.
		if (actual_repeats>0) { print "\r"; if (system("sleep " 1/speed "; exit 27") != 27) exit; }
	}
	print "\033[0m\n"
}
EOF
